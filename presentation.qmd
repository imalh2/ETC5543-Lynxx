---
title: "The Relationship Between Bus Travel Times and Road Congestion"
author: "Ibrahim Al-Hindi"
format: 
  revealjs:
    theme: serif
editor: visual
knitr:
  opts_chunk: 
    echo: FALSE
    message: FALSE
    warning: FALSE
    cache: TRUE
    fig.align: "center"
---

```{r}
#| include: false
library(tidyverse)
library(here)
library(lubridate)
library(leaflet)
library(hms)
library(janitor)
library(broom)
library(kableExtra)
library(scales)

# Holidays dates
holidays_raw <- read_csv(here("data/DIT/specialdays.csv"))

# Links information
links_raw <- read_csv(here("data/DIT/links.csv"))

# List of links on South Rd and their geometries
southrd_links_raw <- read_csv(here("data/South-Rd/Links - South Rd.csv"))

# Stops information
full_stops_raw <- read_csv(here("data/GTFS/stops.csv"))

# Routes, trips, and stops on South Rd
southrd_routes_stops_raw <- read_csv(here("data/South-Rd/South Rd Routes and Trips gtfs 1157.csv"))

# GTFS-R Trip Updates for South Rd
southrd_updates_raw <- read_csv(here("data/South-Rd/trip_updates_SouthRd_Mar.csv"))

# South Rd link statistics
southrd_link_stats_raw <- read_csv(here("data/South-Rd/link_stats_Mar.csv"))
```

## Internship Company and Client

<br>

#### Lynxx Asia Pacific

-   Data science consulting company

-   Specializing in public transport

<br>

#### South Australia Department for Infrastructure and Transport (DIT)

## Objectives

<br>

1.  If vehicle travel times vary from "normal" relative to the time of day, how much of this variation do we see reflected in bus travel times? Provides an indication of bus network robustness to congestion. Especially during morning and evening rush hours

<br>

2.  Methodology and code as repeatable and automated as possible

## Data {style="font-size: 30px;"}

1.  **General Transit Feed Specification Realtime (GTFSR)**

    -   Created by Google. Open source. Used worldwide

    -   Real time updates at regular intervals that provide expected arrival times for the stops upcoming in the trip

<br>

2.  **DIT Addinsight**

    -   Traffic information collected by devices on the road that tag motor vehicles

    -   The location of a device is called a site, and a link is a segment of road between two sites, an origin site and a destination site

    -   Generates traffic flow metrics such as travel time

## South Road - March 2022

![](images/SouthRd_Map.png){fig-align="center" width="100%"}

::: notes
one of Adelaide's most important and major roads, and regularly suffers from congestion
:::

```{r}
segment_route_stops <- clean_names(southrd_routes_stops_raw)
  
segment_routes <- segment_route_stops %>% 
  pull(route_id) %>% 
  unique()

segment_stops <- segment_route_stops %>% 
  pull(stop_id_gtfs_history_prod_stops_csv) %>% 
  unique()

# Join stops information to stops on the segment
stops_segment <- full_stops_raw %>%
  filter(stop_id %in% segment_stops) %>%
  select(stop_id, stop_name, stop_desc, stop_lat, stop_lon) %>%
  distinct(stop_id, .keep_all = TRUE) %>%
  # If stop is on East side, that means trip SB, and vice versa
  mutate(direction = if_else(str_detect(stop_name, "East"), "SB", "NB"))

rm(southrd_routes_stops_raw)
```

## GTFSR - Trip Updates

-   Trip stops within segment only

-   Trip time is calculated as time between first stop and last stop on the segment

-   Many errors

```{r}
updates <- southrd_updates_raw %>%
  rename(
    trip_id = id,
    vehicle_id = label) %>%
  mutate(
    start_date = ymd(start_date),
    timestamp = as_datetime(timestamp, tz = "Australia/Adelaide"),
    arrival_time = as_datetime(arrival_time, tz = "Australia/Adelaide")) %>%
  select(-direction_id, -wheelchair_accessible)
```

## Trip Updates Cleaning

::: panel-tabset
## Pre-Cleaning

```{r}
holidays <- unique(holidays_raw$date)
rm(holidays_raw)
updates <- updates %>%
  inner_join(select(stops_segment, stop_id, direction), by = "stop_id") %>%
  filter(
    !start_date %in% holidays,
    !wday(start_date, label = TRUE) %in% c("Sat", "Sun"))
updates_stop_times <- updates %>%
  group_by(start_date, trip_id) %>%
  arrange(stop_sequence, .by_group = TRUE) %>%
  mutate(to_stop_time = as.numeric(arrival_time - lag(arrival_time), units = "secs")) %>%
  ungroup() %>%
  mutate(to_stop_time = replace_na(to_stop_time, 0))

ggplot(updates_stop_times, aes(to_stop_time/60, delay/60)) +
  geom_point(alpha = 0.3) +
  geom_vline(xintercept = 0, color = "red", linetype = "dashed") +
  scale_x_continuous(labels = label_comma()) +
  scale_y_continuous(labels = label_comma()) +
  labs(x = "To-Stop Time (Minutes)",
       y = "Delay (Minutes)",
       title = "Unedited Trip To-Stop Time Vs. Delay") +
  theme_bw()
```

## Cleaning Code

```{r}
#| echo: true
# Clean updates and get time to each stop for error detection
updates_stop_times <- updates %>%
  group_by(start_date, trip_id) %>%
  arrange(stop_sequence, .by_group = TRUE) %>%
  # Remove trips where all the stops have a delay over 2400 (40 minutes) or
  # early by more than 900 (15 minutes), ie entire trip is delayed or early.
  # Most likely error due to entering the information later. This is done to prevent
  # incorrect analysis since they will be in the wrong time period
  filter(!(all(delay > 2400) |
           all(delay < -900))) %>%
  # Remove one-off large jumps in between two observations
  filter(!(delay - lag(delay, order_by = stop_sequence, default = 0) > 1000 &
             delay - lead(delay, order_by = stop_sequence, default = 0) > 1000)) %>%
  # Remove any observations that have an arrival_time later than any following
  # arrival_time in the trip AND the timestamp is earlier than any following timestamps in the trip.
  # This ensures the most recent timestamp is preferred when discrepancy occurs
  filter(!(as.numeric(arrival_time) > order_by(-stop_sequence, cummin(as.numeric(arrival_time))) &
             as.numeric(timestamp) == order_by(-stop_sequence, cummin(as.numeric(timestamp))))) %>%
  # Remove if the arrival_time is less than the previous arrival_times AND the timestamp
  # is older than the previous timestamps
  filter(!(arrival_time < order_by(stop_sequence, cummax(as.numeric(arrival_time))) &
             timestamp < order_by(stop_sequence, cummax(as.numeric(timestamp))))) %>%
  # If arrival_time of a stop is less than prior stops but they all have the same
  # timestamp, it's not possible to know which is correct. Assume earlier stop_sequence
  # is correct since it is closer when the update is made
  filter(!(timestamp == order_by(stop_sequence, cummax(as.numeric(timestamp))) &
             arrival_time < order_by(stop_sequence, cummax(as.numeric(arrival_time))))) %>%
  # If after the above, two consecutive stops have the same arrival_time, remove
  # the one with an older timestamp
  filter(!(arrival_time == lead(arrival_time,
                                order_by = stop_sequence,
                                default = ymd("9999-01-01")) &
             timestamp < lead(timestamp,
                              order_by = stop_sequence,
                              default = ymd("9999-01-01")))) %>%
  # If two stops have the same arrival_time and same time_stamp, remove the one
  # with a higher stop sequence. Make sure only 2 stops and not more
  filter(!(arrival_time != lead(arrival_time,
                                order_by = stop_sequence,
                                default = ymd("9999-01-01")) &
             arrival_time == lag(arrival_time,
                                 order_by = stop_sequence,
                                 default = ymd("0000-01-01")) &
             timestamp == lag(timestamp,
                              order_by = stop_sequence,
                              default = ymd("0000-01-01")))) %>%
  # Remove trips with multiple repeating arrival_times
  filter(!n_distinct(arrival_time) < n()) %>%
  mutate(
    to_stop_time = as.numeric(arrival_time - lag(arrival_time), units = "secs"),
    first_stop = first(stop_id, order_by = stop_sequence),
    last_stop = last(stop_id, order_by = stop_sequence)) %>%
  ungroup() %>%
  mutate(to_stop_time = replace_na(to_stop_time, 0))
```

## Post-Cleaning

```{r}
ggplot(updates_stop_times, aes(to_stop_time/60, delay/60)) +
  geom_point(alpha = 0.3) +
  geom_vline(xintercept = 0, color = "red", linetype = "dashed") +
  scale_x_continuous(labels = label_comma()) +
  scale_y_continuous(labels = label_comma()) +
  labs(x = "To-Stop Time (Minutes)",
       y = "Delay (Minutes)",
       title = "Cleaned Trip To-Stop Time Vs. Delay") +
  theme_bw()
```
:::

::: notes
-   Explain to_stop_time

-   Negative values

-   Very high delays (all stops delayed)

-   Cleaning took a long time. Insure no further errors, surgical, correct order, correct code

-   8 different types of errors

-   Percentage of errors: 3.83%
:::

```{r}
# Take top occurring stops pair for each direction
top_first_last_stops <- updates_stop_times %>%
  distinct(start_date, trip_id, direction, first_stop, last_stop) %>%
  group_by(direction) %>%
  count(first_stop, last_stop, sort = TRUE) %>%
  slice_max(order_by = n, n =2) %>%
  ungroup()

# Get trips with only most occurring stops pair per direction identified
updates_stop_times_x <- updates_stop_times %>%
  semi_join(top_first_last_stops, by = c("direction", "first_stop", "last_stop"))

updates_trip_time <- updates_stop_times_x %>%
  group_by(start_date, trip_id) %>%
  arrange(stop_sequence, .by_group = TRUE) %>%
  mutate(trip_time = as.numeric((last(arrival_time) -first(arrival_time)), units = "secs"),
         delay_diff = abs(last(delay) - first(delay))) %>%
  filter(stop_sequence == first(stop_sequence, order_by = stop_sequence)) %>%
  ungroup() %>%
  distinct(start_date, trip_id, .keep_all = TRUE) %>% 
  mutate(stops_pair = paste0(first_stop, "-", last_stop))
```

```{r}
top_first_last_stops <- updates_stop_times %>%
  distinct(start_date, trip_id, direction, first_stop, last_stop) %>%
  group_by(direction) %>%
  count(first_stop, last_stop, sort = TRUE) %>%
  slice_max(order_by = n) %>%
  ungroup()
```

```{r}
updates_stop_times <- updates_stop_times %>%
  semi_join(top_first_last_stops, by = c("direction", "first_stop", "last_stop"))

updates_trip_time <- updates_stop_times %>%
  group_by(start_date, trip_id) %>%
  arrange(stop_sequence, .by_group = TRUE) %>%
  mutate(
    trip_time = as.numeric((last(arrival_time) -first(arrival_time)), units = "secs"),
    delay_diff = abs(last(delay) - first(delay))) %>%
  ungroup()

updates_trip_time <- updates_trip_time %>%
  # If the delay_diff is greater than 600 (10 minutes), most likely an error
  filter(delay_diff < 600) %>%
  arrange(start_date, trip_id, stop_sequence)

trip_times <- updates_trip_time %>%
  group_by(start_date, trip_id) %>%
  filter(stop_sequence == first(stop_sequence, order_by = stop_sequence)) %>%
  ungroup() %>%
  distinct(start_date, trip_id, .keep_all = TRUE) %>% 
  mutate(
    rush = case_when(
      as_hms("06:30:00") <= as_hms(arrival_time) & as_hms(arrival_time) < as_hms("10:00:00") ~ "Morning",
      as_hms("15:30:00") <= as_hms(arrival_time) & as_hms(arrival_time) < as_hms("19:00:00") ~ "Evening",
      TRUE ~ "Neither"),
    rush = factor(rush, levels = c("Morning", "Evening", "Neither"))) %>% 
  select(-delay_diff)

rm(southrd_updates_raw)
```

## Trip Times Aggregation

1.  Split data into five minute time periods using first stop arrival time

2.  Average bus travel time per five minute period

```{r}
trip_times_agg <- trip_times %>% 
  mutate(arrival_time = ceiling_date(arrival_time, "5 minutes")) %>% 
  group_by(arrival_time, direction) %>% 
  summarise(
    number_buses = n(),
    bus_time = round(mean(trip_time))) %>%
  ungroup() %>% 
  mutate(
    day = date(arrival_time),
    time = as_hms(arrival_time),
    hour = hour(time),
    rush = case_when(
      between(time, as_hms("06:30:00"), as_hms("09:59:00")) ~ "Morning",
      between(time, as_hms("15:30:00"), as_hms("18:59:00")) ~ "Evening",
      TRUE ~ "Neither"),
    rush = factor(rush, levels = c("Morning", "Evening", "Neither"))) %>% 
  relocate(day:rush, .after = arrival_time) %>% 
  select(-arrival_time)
```

::: notes
done to establish a one-to-one relationship with the vehicles travel time, which are also in five minute intervals
:::

## DIT - Links

-   5 minute aggregated travel time statistics per link

-   Sequence of links needs to be non-overlapping to avoid double counting

-   Approximately same length as the length between the start and end stops of the bus trips

-   Impute travel time statistics for disabled links

```{r}
# Limit updates to end of period examined and get most recent update per link,
# this is done to get the most recent enabled status for each link
links <- links_raw %>%
  filter(date(dms_update_ts) < "2022-04-01") %>%
  group_by(id) %>%
  filter(dms_update_ts == max(dms_update_ts)) %>%
  ungroup() %>%
  select(id, originid:length, direction) %>%
  distinct()

links_segment <- southrd_links_raw %>%
  rename_with(tolower) %>%
  mutate(
    latitude = round(latitude, 5),
    longitude = round(longitude, 5),
    # Extract name of locations where link starts and ends
    start_loc = str_extract(name, "(?<=- ).*(?= to)"),
    end_loc = str_extract(name, "(?<=to ).*")) %>%
  # Extract the latitudes of where the link starts and ends
  group_by(linkid) %>%
  mutate(
    start_lat = first(latitude, order_by = ordernumber),
    end_lat = last(latitude, order_by = ordernumber)) %>%
  ungroup() %>%
  # Length in southrd_links_raw is not correct, join with links to get correct lengths and direction
  select(-length) %>%
  left_join(links, by = c("linkid" = "id"))

# Get only first entry per link
links_segment_unq <- links_segment %>%
  arrange(linkid, ordernumber) %>%
  distinct(linkid, .keep_all = TRUE)

directions <- sort(unique(links_segment_unq$direction))

rm(links_raw)
rm(southrd_links_raw)
```

::: notes
-   Remind what a link is

-   Need for vehicles travel time
:::

```{r}
links_dir1 <- links_segment_unq %>%
  # Build map from south to north
  filter(direction == directions[1]) %>% 
  arrange(start_lat)

links_dir1_enabled <- links_dir1 %>%
  filter(enabled)

# Start and end at same locations as bus stops by referencing map above
dir1_start_loc <- "celtic"
dir1_end_loc <- "anzac"

# Retrieve sequence of links composing segment
links_dir1_enabled <- links_dir1_enabled[min(which(str_starts(tolower(links_dir1_enabled$start_loc),
                                                                  tolower(dir1_start_loc)))):
                                               max(which(str_starts(tolower(links_dir1_enabled$end_loc),
                                                                    tolower(dir1_end_loc)))),] %>% 
  group_by(start_loc) %>%
  filter(length == min(length)) %>%
  ungroup()

# Obtain shape for each link
links_dir1_map <- links_segment %>% 
  semi_join(links_dir1_enabled, by = "linkid") %>% 
  arrange(start_lat, ordernumber)

# Create map

links_colors <- c("green","red")

n <- 1

map_dir1 <- leaflet() %>% 
  addTiles()

# Iterate over links to add polyline of each link to the map
for (link in unique(links_dir1_map$linkid)) {
  map_df <- links_dir1_map %>% 
    filter(linkid == link)
  
  map_dir1 <- map_dir1 %>% 
    addPolylines(data = map_df, lng = ~longitude, lat = ~latitude, color = links_colors[n],
                 label = ~linkid, opacity = 0.3)
  
  # Switch colors
  if (n == 1) {
    n <- 2
  } else {
    n <- 1
  }
}

dir1_stops <- stops_segment %>%
  filter(stop_id %in% c(top_first_last_stops[top_first_last_stops["direction"] == directions[1],]$first_stop,
                        top_first_last_stops[top_first_last_stops["direction"] == directions[1],]$last_stop))


```

```{r}

links_dir2 <- links_segment_unq %>%
  filter(direction == directions[2]) %>% 
  arrange(-start_lat)

links_dir2_enabled <- links_dir2 %>%
  filter(enabled)

dir2_start_loc <- "anzac"
dir2_end_loc <- "celtic"

links_dir2_enabled <- links_dir2_enabled[min(which(str_starts(tolower(links_dir2_enabled$start_loc),
                                                                  tolower(dir2_start_loc)))):
                                               max(which(str_starts(tolower(links_dir2_enabled$end_loc),
                                                                    tolower(dir2_end_loc)))),] %>% 
  group_by(start_loc) %>%
  filter(length == min(length)) %>%
  ungroup()

links_dir2_map <- links_segment %>% 
  semi_join(links_dir2_enabled, by = "linkid") %>% 
  arrange(-start_lat, ordernumber)

links_colors <- c("green","red")

n <- 1

map_dir2 <- leaflet() %>% 
  addTiles()

for (link in unique(links_dir2_map$linkid)) {
  map_df <- links_dir2_map %>% 
    filter(linkid == link)
  
  map_dir2 <- map_dir2 %>% 
    addPolylines(data = map_df, lng = ~longitude, lat = ~latitude, color = links_colors[n],
                 label = ~linkid, opacity = 0.3)

  if (n == 1) {
    n <- 2
  } else {
    n <- 1
  }
}

dir2_stops <- stops_segment %>%
  filter(stop_id %in% c(top_first_last_stops[top_first_last_stops["direction"] == directions[2],]$first_stop,
                        top_first_last_stops[top_first_last_stops["direction"] == directions[2],]$last_stop))
```

## Northbound Links Map

```{r}
map_dir1 %>% 
  addCircles(data = dir1_stops, lat = ~stop_lat, lng = ~stop_lon, label = ~ stop_id, radius = 50, opacity = 1)
```

## Both Directions Links Map

```{r}
map_both <- leaflet() %>% 
  addTiles()

# Add links first direction
for (link in unique(links_dir1_map$linkid)) {
  map_df <- links_dir1_map %>% 
    filter(linkid == link)
  
  map_both <- map_both %>% 
    addPolylines(data = map_df, lng = ~longitude, lat = ~latitude, color = "green", 
                 opacity = 0.3, label = ~linkid)
}

# Add links second direction
for (link in unique(links_dir2_map$linkid)) {
  map_df <- links_dir2_map %>% 
    filter(linkid == link)
  
  map_both <- map_both %>% 
    addPolylines(data = map_df, lng = ~longitude, lat = ~latitude, color = "red",
                 opacity = 0.3, label = ~linkid)
}

map_both %>% 
  addCircles(data = dir1_stops, lat = ~stop_lat, lng = ~stop_lon, label = ~ stop_id, radius = 50, opacity = 1) %>%
  addCircles(data = dir2_stops, lat = ~stop_lat, lng = ~stop_lon, label = ~ stop_id, radius = 50, opacity = 1)
```

## Impute Statistics for Disabled Links

For link with missing statistics:

1.  Identify closest links with stats before and after missing link

2.  For preceding and proceeding links, calculate travel time divided by the length of the link per five minute period

3.  Average (3) between the preceding and proceeding links per five minute period

4.  Multiply (4) by the length of the missing link to obtain the travel time for each five minute period

```{r}
# DF for missing links imputation
missing_links_impute <- tibble(from = character(),
                               to = character(),
                               linkid = numeric(),
                               prior_linkid = numeric(),
                               post_linkid = numeric(),
                               direction = character())

# For the missing link, retrieve the link as well closest enabled previous and 
# proceeding links for imputation later
missing_links_dir1 <- tibble(from = character(),
                        to = character())

# Add start and end locations of missing links
missing_links_dir1 <- missing_links_dir1 %>% 
  add_row(from = "walsh",
          to = "celtic")

for (i in 1:nrow(missing_links_dir1)) {
  
  from <- tolower(missing_links_dir1$from[i])
  to <- tolower(missing_links_dir1$to[i])
  
  for (a in 1:nrow(links_dir1)) {
    # Get linkid for missing link
    if (str_starts(tolower(links_dir1$start_loc[a]), from) && str_starts(tolower(links_dir1$end_loc[a]), to)) {
      
      linkid <- links_dir1$linkid[a]

      # Retrieve last prior link that is enabled
      prior_linkid <- links_dir1[1:a-1,] %>%
        filter(enabled) %>%
        slice_tail() %>%
        pull(linkid)

      # Retrieve first proceeding link that is enabled
      post_linkid <- links_dir1[a+1:nrow(links_dir1),] %>%
        filter(enabled) %>%
        slice_head() %>%
        pull(linkid)

      missing_links_impute <- missing_links_impute %>%
        add_row(from = from,
                to = to,
                linkid = linkid,
                prior_linkid = prior_linkid,
                post_linkid = post_linkid,
                direction = directions[1])
      break
    }
  }
}
```

```{r}
missing_links_dir2 <- tibble(from = character(),
                        to = character())

missing_links_dir2 <- missing_links_dir2 %>% 
  add_row(from = "celtic",
          to = "walsh")

for (i in 1:nrow(missing_links_dir2)) {
  
  from <- tolower(missing_links_dir2$from[i])
  to <- tolower(missing_links_dir2$to[i])
  
  for (a in 1:nrow(links_dir2)) {
    if (str_starts(tolower(links_dir2$start_loc[a]), from) && str_starts(tolower(links_dir2$end_loc[a]), to)) {
      
      linkid <- links_dir2$linkid[a]
      
      prior_linkid <- links_dir2[1:a-1,] %>%
        filter(enabled) %>%
        slice_tail() %>%
        pull(linkid)

      post_linkid <- links_dir2[a+1:nrow(links_dir1),] %>%
        filter(enabled) %>%
        slice_head() %>%
        pull(linkid)

      missing_links_impute <- missing_links_impute %>%
        add_row(from = from,
                to = to,
                linkid = linkid,
                prior_linkid = prior_linkid,
                post_linkid = post_linkid,
                direction = directions[2])
      break
    }
  }
}

links_all <- unique(c(links_dir1_enabled$linkid, links_dir2_enabled$linkid,
                missing_links_impute$linkid,missing_links_impute$prior_linkid, 
                missing_links_impute$post_linkid))
```

```{r}
link_stats <- southrd_link_stats_raw %>% 
  select(logtime:avgdensity) %>%
  mutate(logtime = ymd_hms(str_remove(logtime, " \\+10:30"), tz = "Australia/Adelaide")) %>%
  filter(
    !as_date(logtime) %in% holidays,
    !wday(logtime, label = TRUE) %in% c("Sat", "Sun")) %>% 
  distinct()

# Join link_stats with links_segment to get direction and length
link_stats <- link_stats %>%
  left_join(select(links_segment_unq, linkid, direction, length)) %>%
  # Calculate speed km/h
  mutate(speed = round((length / 1000) / (tt / 3600)))

rm(southrd_link_stats_raw)
```

```{r}
link_stats <- link_stats %>%
  # Remove speeds over 150 km/h as most likely errors
  filter(speed < 150)

```

## Maps of Links Before Imputation

```{r}
links_with_stats <- links_segment %>% 
  filter(linkid %in% c(links_dir1_enabled$linkid, links_dir2_enabled$linkid,
                       missing_links_impute$linkid)) %>% 
  semi_join(link_stats, by = "linkid")

links_no_stats <- links_segment %>% 
  filter(linkid %in% missing_links_impute$linkid) %>%  
  anti_join(link_stats, by = "linkid")
  
map_links_with_stats <- leaflet() %>% 
  addTiles()

# Draw links with stats in green
for (link in unique(links_with_stats$linkid)) {
  map_df <- links_with_stats %>% 
    filter(linkid == link)
  
  map_links_with_stats <- map_links_with_stats %>% 
    addPolylines(data = map_df, lng = ~longitude, lat = ~latitude, color = "green",
                 opacity = 1, label = ~linkid)
}

# Draw links with no stats in red
for (link in unique(links_no_stats$linkid)) {
  map_df <- links_no_stats %>% 
    filter(linkid == link)
  
  map_links_with_stats <- map_links_with_stats %>% 
    addPolylines(data = map_df, lng = ~longitude, lat = ~latitude, color = "red",
                 opacity = 1, label = ~linkid)
}

map_links_with_stats %>% 
  addCircles(data = dir1_stops, lat = ~stop_lat, lng = ~stop_lon, label = ~ stop_id, radius = 50, opacity = 1) %>%
  addCircles(data = dir2_stops, lat = ~stop_lat, lng = ~stop_lon, label = ~ stop_id, radius = 50, opacity = 1)
```

## Maps of Links After Imputation

```{r}
for(i in 1:nrow(missing_links_impute)) {
  link_length <- links %>% 
    filter(id == missing_links_impute$linkid[i]) %>% 
    pull(length)
  
  link_estimates <- link_stats %>% 
  filter(linkid %in% c(missing_links_impute$prior_linkid[i], missing_links_impute$post_linkid[i])) %>% 
  mutate(time_len = tt / length) %>% 
  group_by(logtime) %>% 
  summarise(
    avg_time_len = mean(time_len),
    direction = unique(direction)) %>% 
  ungroup() %>% 
  mutate(
    linkid = missing_links_impute$linkid[i],
    tt = round(avg_time_len * link_length),
    length = link_length) %>% 
  select(-avg_time_len)
  
  link_stats <- link_stats %>% 
  full_join(link_estimates, by = names(link_estimates))
}

# Remove estimator links not in segment
link_stats <- link_stats %>% 
  filter(linkid %in% c(links_dir1_enabled$linkid, links_dir2_enabled$linkid,
                       missing_links_impute$linkid))

links_with_stats <- links_segment %>% 
  filter(linkid %in% c(links_dir1_enabled$linkid, links_dir2_enabled$linkid,
                       missing_links_impute$linkid)) %>% 
  semi_join(link_stats, by = "linkid")

links_no_stats <- links_segment %>% 
  filter(linkid %in% missing_links_impute$linkid) %>%  
  anti_join(link_stats, by = "linkid")
  
map_links_with_stats <- leaflet() %>% 
  addTiles()

for (link in unique(links_with_stats$linkid)) {
  map_df <- links_with_stats %>% 
    filter(linkid == link)
  
  map_links_with_stats <- map_links_with_stats %>% 
    addPolylines(data = map_df, lng = ~longitude, lat = ~latitude, color = "green",
                 opacity = 1, label = ~linkid)
}

for (link in unique(links_no_stats$linkid)) {
  map_df <- links_no_stats %>% 
    filter(linkid == link)
  
  map_links_with_stats <- map_links_with_stats %>% 
    addPolylines(data = map_df, lng = ~longitude, lat = ~latitude, color = "red",
                 opacity = 1, label = ~linkid)
}

map_links_with_stats %>% 
  addCircles(data = dir1_stops, lat = ~stop_lat, lng = ~stop_lon, label = ~ stop_id, radius = 50, opacity = 1) %>%
  addCircles(data = dir2_stops, lat = ~stop_lat, lng = ~stop_lon, label = ~ stop_id, radius = 50, opacity = 1)
```

## Links Statistics {.scrollable}

The travel time of all the links in the same five minute period will be summed, per direction, to give the total travel time on the segment

```{r}
links_times <- link_stats %>%
  group_by(logtime, direction) %>%
  summarise(links_time = sum(tt)) %>%
  ungroup() %>%
  mutate(
    day = date(logtime),
    time = as_hms(logtime),
    hour = hour(logtime),
    rush = case_when(
      between(time, as_hms("06:30:00"), as_hms("09:59:00")) ~ "Morning",
      between(time, as_hms("15:30:00"), as_hms("18:59:00")) ~ "Evening",
      TRUE ~ "Neither"),
    rush = factor(rush, levels = c("Morning", "Evening", "Neither"))) %>%
  relocate(day:rush, .after = logtime) %>% 
  select(-logtime)
```

## Travel Times Comparison

-   General understanding of the relationship

-   Validate data

```{r}
travel_times <- trip_times_agg %>%
  inner_join(links_times) %>% 
  mutate(travel_diff = bus_time - links_time)

travel_times_piv <- travel_times %>% 
  pivot_longer(cols = bus_time:links_time, names_to = "type", values_to = "travel_time") %>% 
  mutate(type = recode(type, bus_time = "Bus", links_time = "Vehicle"))

travel_times_piv %>% 
  filter(rush != "Neither") %>% 
  ggplot(aes(travel_time/60, fill = type)) +
  geom_density(alpha = 0.4) +
  facet_grid(vars(direction), vars(rush)) +
  scale_x_continuous(labels = label_comma(), limits = c(min(travel_times_piv$travel_time/60), 25)) +
  labs(x = "Travel Time (Minutes)", fill = "Type", title = "Bus Travel Time vs Vehicle Travel Time") +
  theme_bw()
```

::: notes
-   For northbound travel to the city, vehicle travel time largely remains the same during both periods of rush hour, while bus travel times actually increase in the evening, a surprising result.

-   For southbound travel away from the city, both travel times in the evening increase as expected and are more varied than the travel times in the morning.
:::

## Travel Times Calendar

::: panel-tabset
## Northbound

```{r}
travel_times_piv_dir1 <- travel_times_piv %>% 
  filter(direction == directions[1])

travel_times_piv_dir1 %>%  
  ggplot(aes(time, travel_time, color = type)) +
  geom_line(size = 0.75) +
  facet_wrap(vars(day), scales = "free_y") +
  scale_x_time(labels = label_time("%H:%M")) +
  ggtitle(directions[1]) +
  labs(x = "Time",
       y = "Travel Time", 
       color = "Type", 
       title = "Northbound Bus Times vs Vehicle Times") +
  theme_bw() +
  theme(
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.grid.major.y = element_blank(),
    panel.grid.minor.y = element_blank(),
    legend.title = element_blank(),
    legend.justification = "bottom",
    legend.position = c(0.5, 0),
    legend.text = element_text(size = 10))
```

## Southbound

```{r}
travel_times_piv_dir2 <- travel_times_piv %>% 
  filter(direction == directions[2])

travel_times_piv_dir2 %>% 
  ggplot(aes(time, travel_time, color = type)) +
  geom_line(size = 0.75) +
  facet_wrap(vars(day), scales = "free_y") +
  scale_x_time(labels = label_time("%H:%M")) +
  ggtitle(directions[2]) +
  labs(x = "Time",
       y = "Travel Time", 
       color = "Type", 
       title = "Southbound Bus Times vs Vehicle Times") +
  theme_bw() +
  theme(
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank(),
    panel.grid.major.y = element_blank(),
    panel.grid.minor.y = element_blank(),
    legend.title = element_blank(),
    legend.justification = "bottom",
    legend.position = c(0.5, 0),
    legend.text = element_text(size = 10))
```
:::

::: notes
Client asked to validate the DIT data by looking for similarity in the patterns from both data sets
:::

## Average Day Travel Time

```{r}
links_30min <- link_stats %>%
  group_by(logtime, direction) %>%
  summarise(links_time = sum(tt)) %>%
  ungroup() %>% 
  mutate(logtime = ceiling_date(logtime, "30 mins"),
         time = as_hms(logtime)) %>% 
  group_by(time, direction) %>% 
  summarise(links_time = mean(links_time)) %>% 
  ungroup() %>% 
  mutate(rush = case_when(
           between(time, as_hms("06:30:00"), as_hms("10:00:00")) ~ "morning",
           between(time, as_hms("15:30:00"), as_hms("19:00:00")) ~ "evening",
           TRUE ~ "neither"),
         rush = factor(rush, levels = c("morning", "evening", "neither"))) %>% 
  relocate(links_time, .after = everything())

# Average bus trip times in each 30 minute bin
trip_times_30min <- trip_times %>% 
  mutate(arrival_time = ceiling_date(arrival_time, "30 minutes"),
         time = as_hms(arrival_time)) %>% 
  group_by(time, direction) %>% 
  summarise(bus_time = round(mean(trip_time))) %>%
  ungroup() %>% 
  mutate(rush = case_when(
           between(time, as_hms("06:30:00"), as_hms("10:00:00")) ~ "morning",
           between(time, as_hms("15:30:00"), as_hms("19:00:00")) ~ "evening",
           TRUE ~ "neither"),
         rush = factor(rush, levels = c("morning", "evening", "neither"))) %>% 
  relocate(bus_time, .after = everything())

links_trips_30min <- links_30min %>% 
  inner_join(trip_times_30min) %>% 
  pivot_longer(cols = links_time:bus_time, names_to = "type", values_to = "value") %>% 
  mutate(type = recode(type, bus_time = "Bus", links_time = "Vehicle"))

ggplot(links_trips_30min, aes(time, value/60)) +
geom_line(alpha = 0.2, size = 1) +
geom_line(data = filter(links_trips_30min, rush == "morning"), color = "blue", size = 1) +
geom_line(data = filter(links_trips_30min, rush == "evening"), color = "blue", size = 1) +
facet_grid(rows = vars(type), cols = vars(direction)) +
annotate("rect", xmin = as_hms("06:30:00"), xmax = as_hms("10:00:00"), ymin = -Inf, ymax = Inf,
         fill = "red", alpha = .1) +
annotate("rect", xmin = as_hms("15:30:00"), xmax = as_hms("19:00:00"), ymin = -Inf, ymax = Inf,
         fill = "red", alpha = .1) +
scale_x_time(limits = as_hms(c("06:00:00", "23:59:59")),
             breaks = as_hms(c("06:00:00", "08:00:00", "10:00:00", "12:00:00",
                               "15:00:00", "17:00:00", "19:00:00")),
             labels = c("6", "8", "10", "12", "15", "17", "19")) +
scale_y_continuous(labels = label_comma()) +
labs(x = "Time (Hour)",
     y = "Travel Time (Minutes)",
     title = "Average Travel Time Pattern") +
theme_bw()
```

::: notes
-   Calculated by averaging all the trips within the same 30 minute period across the entire month

-   morning and evening rush hours highlighted

-   Travel times between both types largely similar

-   For northbound travel towards the city, travel times are the same for both rush hours, and the travel time in the rush hours are not much greater than non-rush hour times

-   Southbound travel away from the city follows expectations as the travel time for both types dramatically increases in the evening rush hour as workers leave the city.
:::

## Standardize Travel Times

-   Travel times naturally change throughout the day

-   Travel times need to be standardized to allow examination of the relationship of variations from "normal"

-   Function `standardizer` created to standardize both types of travel times with respect to the time of day

```{r}
standardiser <- function(basis = hour) {
  if (!deparse(substitute(basis)) %in% c("time", "hour", "rush")) {
    stop("basis must be either time, hour, or rush")
  }
  
  trip_times_std <- trip_times_agg %>%
    group_by({{basis}}, direction) %>% 
    mutate(
      period_buses_no = n(),
      bus_time_std = as.vector(scale(bus_time))) %>% 
    ungroup() %>% 
    mutate(bus_time_std = if_else(is.nan(bus_time_std), 0, bus_time_std)) %>%
    filter(abs(bus_time_std) < 3) %>%
    select(-bus_time)
    
  links_times_std <- links_times %>% 
    group_by({{basis}}, direction) %>% 
    mutate(links_time_std = as.vector(scale(links_time))) %>% 
    ungroup() %>% 
    filter(abs(links_time_std) < 3) %>%
    select(-links_time)
  
  # Combine
  travel_times_std <<- trip_times_std %>%
    inner_join(links_times_std) %>%
    mutate(std_travel_diff = bus_time_std - links_time_std)
  
  travel_times_std_piv <<- travel_times_std %>% 
    pivot_longer(cols = bus_time_std:links_time_std, names_to = "type", values_to = "std_travel_time") %>% 
    mutate(type = recode(type, bus_time_std = "Bus", links_time_std = "Vehicle"))
}

standardiser()
```

## Standardized Travel Times

::: panel-tabset
## Northbound - Morning

```{r}
travel_times_std_NB_morn <- travel_times_std %>% 
  filter(direction == "NB",
         rush == "Morning")

travel_times_std_piv_NB_morn <- travel_times_std_piv %>% 
  filter(direction == "NB",
         rush == "Morning")

travel_times_std_piv_NB_morn %>%
  ggplot(aes(time, std_travel_time, color = type)) +
  geom_line(size = 0.75) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  facet_wrap(vars(day)) +
  scale_x_time(labels = label_time("%H:%M")) +
  labs(x = "Time",
       y = "Travel Time", 
       color = "Type", 
       title = "Standardized Northbound Morning Bus Times vs Vehicle Times") +
  theme_bw() +
  theme(
    legend.title = element_blank(),
    legend.justification = "bottom",
    legend.position = c(0.5, 0),
    legend.text = element_text(size = 10))
```

## Southbound - Evening

```{r}
travel_times_std_SB_eve <- travel_times_std %>% 
  filter(direction == "SB",
         rush == "Evening")

travel_times_std_piv_SB_eve <- travel_times_std_piv %>% 
  filter(direction == "SB",
         rush == "Evening")

travel_times_std_piv_SB_eve %>%
  ggplot(aes(time, std_travel_time, color = type)) +
  geom_line(size = 0.75) +
  geom_hline(yintercept = 0, linetype = "dashed") +
  facet_wrap(vars(day)) +
  scale_x_time(labels = label_time("%H:%M")) +
  labs(x = "Time",
       y = "Travel Time", 
       color = "Type", 
       title = "Standardized Southbound Evening Bus Times vs Vehicle Times") +
  theme_bw() +
  theme(
    legend.title = element_blank(),
    legend.justification = "bottom",
    legend.position = c(0.5, 0),
    legend.text = element_text(size = 10))
```
:::

::: notes
variations follow each other
:::

## Standardized Travel Times Distributions

```{r}
travel_times_std_piv %>% 
  filter(rush != "Neither") %>% 
  ggplot(aes(std_travel_time, fill = type)) +
  geom_density(alpha = 0.4) +
  facet_grid(vars(direction), vars(rush)) +
  labs(x = "Standardized Travel Time",
       fill = "Type",
       title = "Standardized Bus Travel Time vs Vehicle Travel Time") +
  theme_bw()
```

::: notes
standard travel times are more varied in the morning towards the city
:::

## Scatter Plots and Correlation

::: panel-tabset
## Scatter Plots

```{r}
travel_times_std %>% 
  filter(rush != "Neither") %>% 
  ggplot(aes(links_time_std, bus_time_std)) +
  geom_point(alpha = 0.3) +
  facet_grid(vars(direction), vars(rush)) +
  labs(x = "Standardized Bus Travel Times",
       y = "Standardized Vehicles Travel Times",
       title = "Bus Travel Times vs Vehicles Travel Times per Direction per Rush Hour") +
  theme_bw()
```

## Correlation

```{r}
travel_times_std %>% 
  filter(rush != "Neither") %>% 
  group_by(rush, direction) %>% 
  summarise(Correlation = round(cor(bus_time_std, links_time_std), 2)) %>% 
  ungroup() %>% 
  rename(Direction = direction,
         Rush = rush) %>% 
  kable() %>% 
  kable_styling()
```
:::

::: notes
strong correlation in the evening towards the city
:::

## Findings {style="font-size: 31px;"}

-   In the evening from the city, absolute travel times are greater and more varied than those in the morning towards the city

-   The standardization of the travel times indicates that while evening travel times from the city are greater in absolute terms, they are consistently so. Whereas the variation of the morning travel time towards the city is more varied while taking less time in absolute terms

-   The evening southbound correlation is strong between the standardized travel times, however the variations are relatively small, therefore it's difficult to infer the bus transportation robustness to congestion as larger variation magnitudes would have to be observed and examined

-   The morning standardized travel times towards the city are more varied and the correlation is lower, implying the bus transportation is relatively more robust to congestion than evening bus travel from the city

## Future Directions {style="font-size: 36px;"}

-   Analyze more roads on the network to create a ranking of bus network robustness to road congestion. More targeted allocation of resources

-   Analyze previous periods to provide rate of decline of robustness

-   Use average speed as congestion measure. More versatile: more stops pairs, bottlenecks identification

-   Include other factors for comparison, such as bus lanes, number of cars, number of stops, traffic lights...

-   Build a predictive model with identified features

-   Works are planned for South Road. Redo analysis after works are completed to study their impact
